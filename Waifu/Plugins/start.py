import asyncio
import random
from pyrogram import filters, enums
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from Waifu.Database.main import add_users_to_db, get_users_list, add_chat_to_db, get_chats_list
from Waifu import waifu
from Waifu import prefix

start_message = "M·¥ès ú…™ M·¥ès ú…™ {mention}\…¥T ú…™s …™s ·¥°·¥Ä…™“ì·¥ú …¢ Ä·¥Ä ô ô·¥á Ä/·¥Ñ·¥è ü ü·¥á·¥Ñ·¥õ·¥è Ä  ô·¥è·¥õ. I·¥õ's ·¥Ä ü ü·¥è·¥°·¥á·¥Ö ·¥õ·¥è ·¥Ñ·¥Ä·¥õ·¥Ñ ú/…¢ Ä·¥Ä ô  Ä·¥Ä…¥·¥Ö·¥è·¥ç ·¥°·¥Ä…™“ì·¥ús s·¥ò·¥Ä·¥°…¥·¥á·¥Ö …™…¥ …¢ Ä·¥è·¥ú·¥ò ·¥Ñ ú·¥Ä·¥õ.F·¥è Ä ·¥ç·¥è Ä·¥á J·¥è…™…¥: [S·¥ú·¥ò·¥ò·¥è Ä·¥õ](https://t.me/botsupportx)"
photo_links = [
    "https://telegra.ph/file/31544ca877fde042275ff.jpg",
    "https://telegra.ph/file/2e60670798b5b70458c67.jpg",
    "https://telegra.ph/file/95f92cefb8ec53ee0c625.jpg",
    "https://telegra.ph/file/3b5ebeeb66bdef64b87fd.jpg"
]

reply_markup = InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton("‚§ú S·¥ú·¥ò·¥ò·¥è Ä·¥õ ‚§õ", url="https://t.me/botsupportx"),
                InlineKeyboardButton("‚áú U·¥ò·¥Ö·¥Ä·¥õ·¥ás ‚áù", url="https://t.me/botupdatex")
            ],
            [
                InlineKeyboardButton("‚òä O·¥°…¥·¥á Ä ‚òã", url="https://t.me/Ikaris0_0"),
                InlineKeyboardButton("‚òå C Ä·¥á·¥Ö…™·¥õs ‚òå", url="https://telegra.ph/ìÜ©·é†·•≤ ÄŒ∫ìÜ™-ñ§ç-11-20-2")
            ],
            [
                InlineKeyboardButton("+ A·¥Ö·¥Ö M·¥á I…¥ G Ä·¥è·¥ú·¥ò +", url="https://t.me/Chat_Rank_Roobot?startgroup=true")
            ]
        ]
)


@waifu.on_message(filters.command("start", prefix))
async def start_command(_, message):
    chat_id = int(message.chat.id)
    mention = f"@{message.from_user.username}" if message.from_user.username else message.from_user.mention

    if message.chat.type == enums.ChatType.PRIVATE:
        user_id = int(message.from_user.id)
        photo_link = random.choice(photo_links)
        await message.reply_photo(photo=photo_link, caption=start_message.format(mention=mention), reply_markup=reply_markup)
        if user_id not in await get_users_list():
            await add_users_to_db(user_id)
    else:
        message.chat.type != enums.ChatType.PRIVATE:
        photo_link = random.choice(photo_links)
        await message.reply_photo(photo=photo_link, caption=start_message.format(mention=mention), reply_markup=reply_markup)
        if chat_id not in await get_chats_list():
            await add_chat_to_db(message.chat)
